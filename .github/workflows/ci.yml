name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:

  lint:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.13.3
        uses: actions/setup-python@v5
        with:
          python-version: "3.13.3"

      - name: Install dependencies
        run: |
          pip install -r requirements/dev.txt

      - name: Run flake8
        run: |
          echo "Running flake8..."
          flake8 app/

      - name: Run black
        run: | 
          echo "Running black..."
          black --check app/

      - name: Run isort
        run: |
          echo "Running isort..."
          isort --check-only app/
      
      - name: Run mypy
        run: |
          echo "Running mypy..."
          mypy app/


  build-image:
    needs: lint
    runs-on: ubuntu-latest
    permissions:
      contents: read

    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
      digest: ${{ steps.docker_build.outputs.digest }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build Docker image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max


  integration-tests:
    needs: build-image
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Load Docker image
        run: |
          TAG=$(echo "${{ needs.build-image.outputs.tags }}" | cut -d',' -f1)
          docker pull $TAG

      - name: Create .env for CI
        run: |
          cp .env.example .env

      - name: Start containers and wait for health
        run: |
          cd deploy
          docker compose up -d
          echo "Waiting for services to become healthy..."
          for service in app postgres; do
            for i in {1..12}; do
              status=$(docker inspect --format='{{.State.Health.Status}}' $(docker compose ps -q $service))
              echo "$service health: $status"
              if [ "$status" = "healthy" ]; then
                break
              fi
              sleep 5
            done
            if [ "$status" != "healthy" ]; then
              echo "ERROR: $service did not become healthy in time"
              exit 1
            fi
          done

      - name: Run integration tests
        run: |
          pip install -r requirements/dev.txt
          pytest -v app/tests

      - name: Stop containers
        if: always()
        run: cd deploy && docker compose down


  push-and-sign:
    needs: integration-tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Install cosign (only on non-PR)
        if: ${{ github.event_name != 'pull_request' }}
        uses: sigstore/cosign-installer@v3.5.0
        with:
          cosign-release: 'v2.2.4'

      - name: Log into registry ${{ env.REGISTRY }}
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image
        id: push-image
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ needs.build-image.outputs.tags }}
          labels: ${{ needs.build-image.outputs.labels }}
          cache-from: type=gha

      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          TAGS: ${{ needs.build-image.outputs.tags }}
          DIGEST: ${{ needs.build-image.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
